plugins {
    id 'com.android.library'
}

apply plugin: 'maven-publish'

android {
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("k2.keystore")
            storePassword "nextgenkaldi"
            keyAlias "k2"
            keyPassword "nextgenkaldi"
        }
    }
    //packagingOptions {
        //pickFirst 'lib/arm64-v8a/libc++_shared.so'
    //}

    configurations {
        extractForNativeBuild
    }
    compileSdkVersion 30
    buildToolsVersion "30.0.3"


    defaultConfig {
        //applicationId "com.xiaomi.k2"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        //testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments "-DK2_USE_PYTORCH=OFF", "-DK2_WITH_CUDA=OFF", "-DK2_ENABLE_TESTS=OFF", "-DK2_ENABLE_BENCHMARK=OFF"
            }
        }

        ndkVersion '21.1.6352462'
        ndk {
            abiFilters ABI_FILTERS.split(",") //'arm64-v8a', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def getLibtorchHeadersDir() {
  def abi = ABI_FILTERS.split(",")[0]
  return ".cxx/cmake/release/$abi/include"
}

afterEvaluate {
  if (POM_PACKAGING == 'aar') {
    android.libraryVariants.all { variant ->
      variant.outputs.each { output ->
        File f = output.outputFile
        if (f.name.endsWith(".aar")) {
          output.assemble.finalizedBy addFolderToAarTask(
              "addHeadersToAar" + variant.name,
              f.path,
              getLibtorchHeadersDir(),
              "headers")
        }
      }
    }
  }

  publishing {
        publications {
            release(MavenPublication) {
                groupId 'com.github.pkufool'
                artifactId 'k2'
                version = '1.17.2'
                artifact("$buildDir/outputs/aar/app-release.aar")
            }
        }
    }
}

tasks.whenTaskAdded { task ->
  if (task.name.startsWith("bundle") && task.name.endsWith("Aar")) {
    doLast {
      addFolderToAar("addHeadersTo" + task.name, task.archivePath, getLibtorchHeadersDir(), 'headers')
    }
  }
}

def addFolderToAarTask(taskName, aarPath, folderPath, folderPathInAar) {
  return tasks.register(taskName) {
    doLast {
      addFolderToAar(taskName, aarPath, folderPath, folderPathInAar)
    }
  }
}

def addFolderToAar(taskName, aarPath, folderPath, folderPathInAar) {
    def tmpDir = file("${buildDir}/${taskName}")
    tmpDir.mkdir()
    def tmpDirFolder = file("${tmpDir.path}/${folderPathInAar}")
    tmpDirFolder.mkdir()
    copy {
      from zipTree(aarPath)
      into tmpDir
    }
    copy {
      from fileTree(folderPath)
      into tmpDirFolder
    }
    ant.zip(destfile: aarPath) {
      fileset(dir: tmpDir.path)
    }
    delete tmpDir
}
